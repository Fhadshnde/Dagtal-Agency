{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Dagtal-Agenced/my-app/src/models/Post.js"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst { Schema } = mongoose;\n\nconst postSchema = new Schema(\n  {\n    title: {\n      type: String,\n      required: true,\n    },\n    desc: {\n      type: String,\n      required: true,\n    },\n    img: {\n      type: String,\n      required: true,\n    },\n    content: {\n      type: String,\n      required: true,\n    },\n    username: {\n      type: String,\n      required: true,\n    },\n  },\n  { timestamps: true }\n);\n\n//If the Post collection does not exist create a new one.\nexport default mongoose.models.Post || mongoose.model(\"Post\", postSchema);\n"],"names":[],"mappings":";;;;;;;;;AAEA,MAAM,EAAE,MAAM,EAAE,GAAG;AAEnB,MAAM,aAAa,IAAI,OACrB;IACE,OAAO;QACL,MAAM;QACN,UAAU;IACZ;IACA,MAAM;QACJ,MAAM;QACN,UAAU;IACZ;IACA,KAAK;QACH,MAAM;QACN,UAAU;IACZ;IACA,SAAS;QACP,MAAM;QACN,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;AACF,GACA;IAAE,YAAY;AAAK;uCAIN,SAAS,MAAM,CAAC,IAAI,IAAI,SAAS,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Dagtal-Agenced/my-app/src/app/api/posts/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport connect from \"@/utils/db\";\nimport Post from \"@/models/Post.js\";\n\nexport const GET = async (request) => {\n  const url = new URL(request.url);\n\n  const username = url.searchParams.get(\"username\");\n\n  try {\n    await connect();\n\n    const posts = await Post.find(username && { username });\n\n    return new NextResponse(JSON.stringify(posts), { status: 200 });\n  } catch (err) {\n    return new NextResponse(\"Database Error\", { status: 500 });\n  }\n};\n\nexport const POST = async (request) => {\n  const body = await request.json();\n\n  const newPost = new Post(body);\n\n  try {\n    await connect();\n\n    await newPost.save();\n\n    return new NextResponse(\"Post has been created\", { status: 201 });\n  } catch (err) {\n    return new NextResponse(\"Database Error\", { status: 500 });\n  }\n};\n"],"names":[],"mappings":";;;;AAAA;;;;;;AAEA;;;;AAEO,MAAM,MAAM,OAAO;IACxB,MAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;IAE/B,MAAM,WAAW,IAAI,YAAY,CAAC,GAAG,CAAC;IAEtC,IAAI;QACF,MAAM;QAEN,MAAM,QAAQ,MAAM,uHAAA,CAAA,UAAI,CAAC,IAAI,CAAC,YAAY;YAAE;QAAS;QAErD,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC,QAAQ;YAAE,QAAQ;QAAI;IAC/D,EAAE,OAAO,KAAK;QACZ,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,kBAAkB;YAAE,QAAQ;QAAI;IAC1D;AACF;AAEO,MAAM,OAAO,OAAO;IACzB,MAAM,OAAO,MAAM,QAAQ,IAAI;IAE/B,MAAM,UAAU,IAAI,uHAAA,CAAA,UAAI,CAAC;IAEzB,IAAI;QACF,MAAM;QAEN,MAAM,QAAQ,IAAI;QAElB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,yBAAyB;YAAE,QAAQ;QAAI;IACjE,EAAE,OAAO,KAAK;QACZ,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,kBAAkB;YAAE,QAAQ;QAAI;IAC1D;AACF"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}