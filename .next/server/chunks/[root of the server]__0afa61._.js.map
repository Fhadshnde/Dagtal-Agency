{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Dagtal-Agenced/my-app/src/models/User.js"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst { Schema } = mongoose;\n\nconst userSchema = new Schema(\n  {\n    name: {\n      type: String,\n      unique: true,\n      required: true,\n    },\n    email: {\n      type: String,\n      unique: true,\n      required: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n  },\n  { timestamps: true }\n);\n\n//If the User collection does not exist create a new one.\nexport default mongoose.models.User || mongoose.model(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,EAAE,MAAM,EAAE,GAAG,yGAAA,CAAA,UAAQ;AAE3B,MAAM,aAAa,IAAI,OACrB;IACE,MAAM;QACJ,MAAM;QACN,QAAQ;QACR,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,QAAQ;QACR,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;AACF,GACA;IAAE,YAAY;AAAK;uCAIN,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Dagtal-Agenced/my-app/src/utlis/db.js"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst connect = async () => {\n  try {\n    await mongoose.connect(process.env.MONGO, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log(\"MongoDB Connected\");\n  } catch (error) {\n    console.error(\"Connection failed!\", error);\n    throw new Error(\"Connection failed!\");\n  }\n};\n\nexport default connect;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,UAAU;IACd,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,KAAK,EAAE;YACxC,iBAAiB;YACjB,oBAAoB;QACtB;QACA,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QACpC,MAAM,IAAI,MAAM;IAClB;AACF;uCAEe"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 126, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Dagtal-Agenced/my-app/src/app/api/auth/register/route.js"],"sourcesContent":["import User from \"@/models/User\";\nimport connect from \"@/utlis/db\";\nimport bcrypt from \"bcryptjs\";\nimport { NextResponse } from \"next/server\";\n\nexport const POST = async (req) => {\n  const { name, email, password } = await req.json();\n  \n  try {\n    await connect(); // تأكد من استدعاء الاتصال بقاعدة البيانات\n    \n    const hashedPassword = await bcrypt.hash(password, 10);\n    const newUser = new User({\n      name,\n      email,\n      password: hashedPassword,\n    });\n    \n    await newUser.save();\n    return new NextResponse(JSON.stringify({ message: \"User created\" }), {\n      status: 201,\n    });\n  } catch (err) {\n    console.error(err);\n    return new NextResponse(JSON.stringify({ error: \"Internal Server Error\" }), {\n      status: 500,\n    });\n  }\n};\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,MAAM,OAAO,OAAO;IACzB,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAEhD,IAAI;QACF,MAAM,CAAA,GAAA,oHAAA,CAAA,UAAO,AAAD,KAAK,0CAA0C;QAE3D,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,MAAM,UAAU,IAAI,uHAAA,CAAA,UAAI,CAAC;YACvB;YACA;YACA,UAAU;QACZ;QAEA,MAAM,QAAQ,IAAI;QAClB,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC;YAAE,SAAS;QAAe,IAAI;YACnE,QAAQ;QACV;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,KAAK,SAAS,CAAC;YAAE,OAAO;QAAwB,IAAI;YAC1E,QAAQ;QACV;IACF;AACF"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}