{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Dagtal-Agenced/my-app/src/models/User.js"],"sourcesContent":["import mongoose from \"mongoose\";\n\nconst { Schema } = mongoose;\n\nconst userSchema = new Schema(\n  {\n    name: {\n      type: String,\n      unique: true,\n      required: true,\n    },\n    email: {\n      type: String,\n      unique: true,\n      required: true,\n    },\n    password: {\n      type: String,\n      required: true,\n    },\n  },\n  { timestamps: true }\n);\n\n//If the User collection does not exist create a new one.\nexport default mongoose.models.User || mongoose.model(\"User\", userSchema);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,EAAE,MAAM,EAAE,GAAG,yGAAA,CAAA,UAAQ;AAE3B,MAAM,aAAa,IAAI,OACrB;IACE,MAAM;QACJ,MAAM;QACN,QAAQ;QACR,UAAU;IACZ;IACA,OAAO;QACL,MAAM;QACN,QAAQ;QACR,UAAU;IACZ;IACA,UAAU;QACR,MAAM;QACN,UAAU;IACZ;AACF,GACA;IAAE,YAAY;AAAK;uCAIN,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Dagtal-Agenced/my-app/src/app/api/auth/%5B...nextauth%5D/route.js"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport GithubProvider from \"next-auth/providers/github\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport User from \"@/models/User\";\nimport connect from \"@/utils/db\";\nimport bcrypt from \"bcryptjs\";\n\nconst handler = NextAuth({\n  providers: [\n    CredentialsProvider({\n      id: \"credentials\",\n      name: \"Credentials\",\n      async authorize(credentials) {\n        await connect();\n\n        try {\n          const user = await User.findOne({\n            email: credentials.email,\n          });\n\n          if (!user) {\n            throw new Error(\"User not found!\");\n          }\n\n          const isPasswordCorrect = await bcrypt.compare(\n            credentials.password,\n            user.password\n          );\n\n          if (!isPasswordCorrect) {\n            throw new Error(\"Wrong Credentials!\");\n          }\n\n          return user;\n        } catch (err) {\n          throw new Error(err.message);\n        }\n      },\n    }),\n    GithubProvider({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n    }),\n  ],\n  pages: {\n    error: \"/dashboard/login\",\n  },\n});\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEA;;;;;;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,IAAI;YACJ,MAAM;YACN,MAAM,WAAU,WAAW;gBACzB,MAAM;gBAEN,IAAI;oBACF,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;wBAC9B,OAAO,YAAY,KAAK;oBAC1B;oBAEA,IAAI,CAAC,MAAM;wBACT,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,oBAAoB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC5C,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAGf,IAAI,CAAC,mBAAmB;wBACtB,MAAM,IAAI,MAAM;oBAClB;oBAEA,OAAO;gBACT,EAAE,OAAO,KAAK;oBACZ,MAAM,IAAI,MAAM,IAAI,OAAO;gBAC7B;YACF;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,SAAS;YAC/B,cAAc,QAAQ,GAAG,CAAC,aAAa;QACzC;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;KACD;IACD,OAAO;QACL,OAAO;IACT;AACF"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}